// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 626ggfSgCYVT2YHifhdAKj
// Component: v8Rg1-JLcN4O

"use client";

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/navigation";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: O1n4fOqLki7Y/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: pWcS6TFHnoYn/codeComponent

import { useScreenVariants as useScreenVariantsvUzx0AI3UQDj } from "./PlasmicGlobalVariant__Mobile"; // plasmic-import: vUZX0aI3uQDj/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_zig_trade_option.module.css"; // plasmic-import: 626ggfSgCYVT2YHifhdAKj/projectcss
import sty from "./PlasmicHeader.module.css"; // plasmic-import: v8Rg1-JLcN4O/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 8Ohe9_jUnbeW/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: 22KJtUBPI_3X/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: ZxojYksPfqIt/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: 9w4Jg3-ETiw4/icon

createPlasmicElementProxy;

export type PlasmicHeader__VariantMembers = {
  menuOpen: "menuOpen";
  signedIn: "signedIn";
};
export type PlasmicHeader__VariantsArgs = {
  menuOpen?: SingleBooleanChoiceArg<"menuOpen">;
  signedIn?: SingleBooleanChoiceArg<"signedIn">;
};
type VariantPropType = keyof PlasmicHeader__VariantsArgs;
export const PlasmicHeader__VariantProps = new Array<VariantPropType>(
  "menuOpen",
  "signedIn"
);

export type PlasmicHeader__ArgsType = {
  dashboardUrl?: string;
  signOut?: (event: any) => void;
};
type ArgPropType = keyof PlasmicHeader__ArgsType;
export const PlasmicHeader__ArgProps = new Array<ArgPropType>(
  "dashboardUrl",
  "signOut"
);

export type PlasmicHeader__OverridesType = {
  root?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultHeaderProps {
  dashboardUrl?: string;
  signOut?: (event: any) => void;
  menuOpen?: SingleBooleanChoiceArg<"menuOpen">;
  signedIn?: SingleBooleanChoiceArg<"signedIn">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeader__RenderFunc(props: {
  variants: PlasmicHeader__VariantsArgs;
  args: PlasmicHeader__ArgsType;
  overrides: PlasmicHeader__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          dashboardUrl: "/signin"
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "showMenu",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "menuOpen",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.menuOpen
      },
      {
        path: "signedIn",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.signedIn
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    mobile: useScreenVariantsvUzx0AI3UQDj()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootmenuOpen]: hasVariant($state, "menuOpen", "menuOpen"),
          [sty.rootmenuOpen_signedIn]:
            hasVariant($state, "signedIn", "signedIn") &&
            hasVariant($state, "menuOpen", "menuOpen"),
          [sty.rootsignedIn]: hasVariant($state, "signedIn", "signedIn")
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__hcmZy, {
          [sty.freeBoxmenuOpen__hcmZyFhglj]: hasVariant(
            $state,
            "menuOpen",
            "menuOpen"
          )
        })}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__zQqIc, {
            [sty.freeBoxmenuOpen_signedIn__zQqIcFhgljTe2Hr]:
              hasVariant($state, "signedIn", "signedIn") &&
              hasVariant($state, "menuOpen", "menuOpen"),
            [sty.freeBoxsignedIn__zQqICte2Hr]: hasVariant(
              $state,
              "signedIn",
              "signedIn"
            )
          })}
        >
          <p.PlasmicLink
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link
            )}
            component={Link}
            href={`/`}
            platform={"nextjs"}
          >
            {"Zig Trade Option"}
          </p.PlasmicLink>
          <div
            className={classNames(projectcss.all, sty.freeBox__wAdaC, {
              [sty.freeBoxmenuOpen__wAdaCFhglj]: hasVariant(
                $state,
                "menuOpen",
                "menuOpen"
              )
            })}
          >
            {(
              hasVariant(globalVariants, "mobile", "mobileOnly")
                ? (() => {
                    try {
                      return !$state.showMenu;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <Button
                className={classNames("__wab_instance", sty.button__pxHdO)}
                color={"white"}
                ghost={true}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateShowMenu"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["showMenu"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = p.get(objRoot, variablePath);
                          p.set(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    typeof $steps["updateShowMenu"] === "object" &&
                    typeof $steps["updateShowMenu"].then === "function"
                  ) {
                    $steps["updateShowMenu"] = await $steps["updateShowMenu"];
                  }
                }}
              >
                <Icon10Icon
                  className={classNames(projectcss.all, sty.svg__yTnLn)}
                  role={"img"}
                />
              </Button>
            ) : null}
            {(
              hasVariant(globalVariants, "mobile", "mobileOnly")
                ? (() => {
                    try {
                      return $state.showMenu;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : true
            ) ? (
              <Button
                className={classNames("__wab_instance", sty.button___8ORfw)}
                color={"white"}
                ghost={true}
                onClick={async event => {
                  const $steps = {};

                  $steps["updateShowMenu"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["showMenu"]
                          },
                          operation: 4
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          const oldValue = p.get(objRoot, variablePath);
                          p.set(objRoot, variablePath, !oldValue);
                          return !oldValue;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    typeof $steps["updateShowMenu"] === "object" &&
                    typeof $steps["updateShowMenu"].then === "function"
                  ) {
                    $steps["updateShowMenu"] = await $steps["updateShowMenu"];
                  }
                }}
              >
                <Icon11Icon
                  className={classNames(projectcss.all, sty.svg__qyIzh)}
                  role={"img"}
                />
              </Button>
            ) : null}
          </div>
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__u5SjV, {
            [sty.freeBoxmenuOpen__u5SjVFhglj]: hasVariant(
              $state,
              "menuOpen",
              "menuOpen"
            )
          })}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ojjIn, {
              [sty.freeBoxmenuOpen__ojjInFhglj]: hasVariant(
                $state,
                "menuOpen",
                "menuOpen"
              )
            })}
          >
            <Button
              className={classNames("__wab_instance", sty.button__olXpW)}
              color={"clear"}
              link={`/`}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__y79F
                )}
              >
                {"Home"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button___9Mprb, {
                [sty.buttonmenuOpen___9MprbFhglj]: hasVariant(
                  $state,
                  "menuOpen",
                  "menuOpen"
                )
              })}
              color={"clear"}
              link={`/plans`}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ytGue
                )}
              >
                {"Plans"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__bpxcP, {
                [sty.buttonmenuOpen__bpxcPFhglj]: hasVariant(
                  $state,
                  "menuOpen",
                  "menuOpen"
                ),
                [sty.buttonsignedIn__bpxcPte2Hr]: hasVariant(
                  $state,
                  "signedIn",
                  "signedIn"
                )
              })}
              color={"clear"}
              link={`/contact`}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wzcl
                )}
              >
                {"Contact"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__xlBjm)}
              color={"clear"}
              link={`/about`}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7ZoB9
                )}
              >
                {"About"}
              </div>
            </Button>
          </p.Stack>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__fNeuH, {
              [sty.freeBoxsignedIn__fNeuHte2Hr]: hasVariant(
                $state,
                "signedIn",
                "signedIn"
              )
            })}
          >
            <Button
              className={classNames("__wab_instance", sty.button__tPpGw, {
                [sty.buttonsignedIn__tPpGwte2Hr]: hasVariant(
                  $state,
                  "signedIn",
                  "signedIn"
                )
              })}
              color={"clear"}
              link={"/signin"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kng09,
                  {
                    [sty.textsignedIn__kng09Te2Hr]: hasVariant(
                      $state,
                      "signedIn",
                      "signedIn"
                    )
                  }
                )}
              >
                {hasVariant($state, "signedIn", "signedIn")
                  ? "Dashboard"
                  : "Sign In"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__bwKtx, {
                [sty.buttonsignedIn__bwKtxte2Hr]: hasVariant(
                  $state,
                  "signedIn",
                  "signedIn"
                )
              })}
              color={"white"}
              ghost={true}
              link={hasVariant($state, "signedIn", "signedIn") ? "" : "/signup"}
              onClick={async event => {
                const $steps = {};
              }}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lDn3V,
                  {
                    [sty.textsignedIn__lDn3Vte2Hr]: hasVariant(
                      $state,
                      "signedIn",
                      "signedIn"
                    )
                  }
                )}
              >
                {hasVariant($state, "signedIn", "signedIn")
                  ? "Sign Out"
                  : "Sign Up"}
              </div>
            </Button>
          </p.Stack>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__bJi0L, {
              [sty.freeBoxsignedIn__bJi0Lte2Hr]: hasVariant(
                $state,
                "signedIn",
                "signedIn"
              )
            })}
          >
            <Button
              className={classNames("__wab_instance", sty.button__vx4Q, {
                [sty.buttonsignedIn__vx4Qte2Hr]: hasVariant(
                  $state,
                  "signedIn",
                  "signedIn"
                )
              })}
              color={"clear"}
              link={args.dashboardUrl}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lo5Ls,
                  {
                    [sty.textsignedIn__lo5Lste2Hr]: hasVariant(
                      $state,
                      "signedIn",
                      "signedIn"
                    )
                  }
                )}
              >
                {hasVariant($state, "signedIn", "signedIn")
                  ? "Dashboard"
                  : "Dashboard"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__pYsrS, {
                [sty.buttonsignedIn__pYsrSte2Hr]: hasVariant(
                  $state,
                  "signedIn",
                  "signedIn"
                )
              })}
              color={"white"}
              ghost={
                hasVariant($state, "signedIn", "signedIn") ? true : undefined
              }
              link={hasVariant($state, "signedIn", "signedIn") ? "" : "/signup"}
              onClick={args.signOut}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__otOe9,
                  {
                    [sty.textsignedIn__otOe9Te2Hr]: hasVariant(
                      $state,
                      "signedIn",
                      "signedIn"
                    )
                  }
                )}
              >
                {hasVariant($state, "signedIn", "signedIn")
                  ? "Sign Out"
                  : "Sign Out"}
              </div>
            </Button>
          </p.Stack>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeader__VariantsArgs;
    args?: PlasmicHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHeader__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHeader__ArgProps,
          internalVariantPropNames: PlasmicHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
